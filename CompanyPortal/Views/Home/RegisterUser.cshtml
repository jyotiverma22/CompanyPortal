@using CompanyPortal.ViewModels

@model CompanyPortal.ViewModels.RegisterViewModel


@{
    ViewBag.Title = "RegisterUser";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="stylesheet" href="~/Content/themes/base/datepicker.css">

<h2></h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Sign Up</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <!--     <div class="form-group">
                  @Html.LabelFor(model => model.userId, htmlAttributes: new { @class = "control-label col-md-2" })
                  <div class="col-md-10">
                      @Html.EditorFor(model => model.userId, new { htmlAttributes = new { @class = "form-control" } })
                      @Html.ValidationMessageFor(model => model.userId, "", new { @class = "text-danger" })
                  </div>
              </div>
            -->
        <div class="form-group">
            @Html.LabelFor(model => model.Username, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger", @id = "Valid-user" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger", @id = "valid-email" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger", @id = "valid-phone" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger", @id = "valid-pass" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger", @id = "valid-cn" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Firstname, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Firstname, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Firstname, "", new { @class = "text-danger", @id = "valid-fn" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Lastname, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Lastname, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Lastname, "", new { @class = "text-danger", @id = "valid-ln" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                Male    @Html.RadioButtonFor(m => m.Gender, "Male", htmlAttributes: new { @id = "male", @checked = true })
                Female   @Html.RadioButtonFor(m => m.Gender, "Female", htmlAttributes: new { @id = "female" })
                @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger", @id = "valid-gender" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Bloodgroup, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Bloodgroup, new SelectList(Enum.GetValues(typeof(BloodGroup))), "Select BloodGroup")
                @Html.ValidationMessageFor(model => model.Bloodgroup, "", new { @class = "text-danger", @id = "valid-blood" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DOB, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DOB, new { htmlAttributes = new { @class = "form-control datepicker", @type = "date" } })
                @Html.ValidationMessageFor(model => model.DOB, "", new { @class = "text-danger", @id = "valid-dob" })
            </div>
        </div>

        <div>
            Age : <div id="age"></div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Submit" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script src="~/Scripts/jquery-ui-1.12.1.js" type="text/javascript"></script>
<script src="~/lib/js/site.js" type="text/javascript"></script>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryui")
    @Styles.Render("~/Content/cssjqryUi")
    @Scripts.Render("~/lib/js/site")

    <script type="text/javascript">
        $(document).ready(function () {

        
            $("#DOB").focusout(function () {
                var dob = $('#DOB').val();
                if (dob = "") {
                    document.getElementById("valid-dob").innerHTML = "This is required field";
                    $("#valid-dob").show();

                }
                else {
                    dob = new Date(dob);
                    var today = new Date();
                    var age = Math.floor((today - dob) / (365.25 * 24 * 60 * 60 * 1000));
                    //
                    if (age > 20) {
                        $('#age').html(age + ' years old');
                    }
                    else {
                        document.getElementById("valid-dob").innerHTML = "User must complete his 20 years of age";
                        $("#valid-dob").show();

                        //   alert("please enter valid date");
                    }
                }
            });



            $("#DOB").focusin(function () {
                $("#valid-dob").hide();
                document.getElementById("valid-dob").innerHTML = "";

            });



            $("#Username").focusout(function () {
                var user = $(this).val();

                //Checking the length of username
                if (user.length > 0) {
                    if (user.length < 5) {
                        document.getElementById("Valid-user").innerHTML = "Username is too short";
                        $("#Valid-user").show();
                    }
                    else if (user.length > 20) {
                        document.getElementById("Valid-user").innerHTML = "Username is too long";
                        $("#Valid-user").show();
                    }
                    else {
                        //post to check is username already take

                        $.ajax({
                            url: '/api/values/checkUsernameStatus?username='+user,
                            method: 'POST',
                            
                            success: function (response) {
                                console.log(response);  
                                if (response) {
                                    
                                    document.getElementById("Valid-user").innerHTML = "*Username already exist";
                                    $("#Valid-user").show();
                                }
                            },
                            error: function (jqXHR) {
                                console.log(jqXHR);

                            }
                        });
                    }
                }
                else {
                    document.getElementById("Valid-user").innerHTML = "This field is required";
                    $("#Valid-user").show();
                    console.log("not getting values");
                }
            });

            $("#Username").focusin(function () {
                $("#Valid-user").hide();
                document.getElementById("Valid-user").innerHTML = "";

            });



            $("#Email").focusout(function () {
                debugger
                var email = $(this).val();
                //Checking the length of Email
                if (email.length > 0) {
                    if (isEmail(email)) {
                        // check already exist email 

                        $.ajax({
                            url: '/api/values/checkEmailStatus?email=' + email,
                            method: 'POST',
                            
                            success: function (response) {
                                console.log(response);
                                if (response) {

                                    document.getElementById("valid-email").innerHTML = "Email Address Already registered";
                                    $("#valid-email").show();
                                }
                            },
                            error: function (jqXHR) {
                                console.log(jqXHR);

                            }
                        });
                    }
                    else {
                        document.getElementById("valid-email").innerHTML = "Please enter valid email Address";
                        $("#valid-email").show();
                    }
                }
                else {
                    document.getElementById("valid-email").innerHTML = "This field is required";
                    $("#valid-email").show();
                }
            });

            $("#Email").focusin(function () {
                $("#valid-email").hide();
                document.getElementById("valid-email").innerHTML = "";

            });



            $("#Phone").focusout(function () {
                var user = $(this).val();

                //Checking the length of username
                if (user.length > 0) {
                    if (isNaN(user)) {
                        document.getElementById("valid-phone").innerHTML = "Phone number contains only digits";
                        $("#valid-phone").show();

                    }

                  else  if (user.length != 10 ) {
                        document.getElementById("valid-phone").innerHTML = "Please enter valid phone number(don't add prefix like 0 or +91)";
                        $("#valid-phone").show();
                    }
                }
                else {
                    document.getElementById("valid-phone").innerHTML = "This field is required";
                    $("#valid-phone").show();
                    console.log("not getting values");
                }
            });

            $("#Phone").focusin(function () {
                $("#valid-phone").hide();
                document.getElementById("valid-phone").innerHTML = "";

            });




            $("#Password").focusout(function () {
                var user = $(this).val();

                //Checking the length of username
                if (user.length > 0) {
                    if (user.length < 8) {
                        document.getElementById("valid-pass").innerHTML = "Password must have atleast 8 characters";
                        $("#valid-pass").show();
                    }
                    else if (user.length > 20) {
                        document.getElementById("valid-pass").innerHTML = "Password is too long";
                        $("#valid-pass").show();
                    }
                    else 
                        if (!isPassword(user)) {
                            document.getElementById("valid-pass").innerHTML = "Password must have atleast one letter, digit and special character;
                            $("#valid-pass").show();
                        }
                    
                }
                else {
                    document.getElementById("valid-pass").innerHTML = "This field is required";
                    $("#valid-pass").show();
                    console.log("not getting values");
                }
            });

            $("#Password").focusin(function () {
                $("#valid-pass").hide();
                document.getElementById("valid-pass").innerHTML = "";

            });



            $("#ConfirmPassword").focusout(function () {
                var user = $(this).val();
                var password = $("#Password").val();
                //Checking the length of username
                if (user.length > 0) {
                    if (user === password) {

                    }
                    else {
                        document.getElementById("valid-cn").innerHTML = "Confirm Password field does not match with Password field";
                        $("#valid-cn").show();
                    }
                }
                else {
                    document.getElementById("valid-cn").innerHTML = "This field is required";
                    $("#valid-cn").show();
                    console.log("not getting values");
                }
            });

            $("#ConfirmPassword").focusin(function () {
                $("#valid-cn").hide();
                document.getElementById("valid-cn").innerHTML = "";

            });


            $("#Firstname").focusout(function () {
                var user = $(this).val();

                //Checking the length of username
                if (user.length === 0) {
                    document.getElementById("valid-fn").innerHTML = "This field is required";
                    $("#valid-fn").show();
                    console.log("not getting values");
                }
                else {
                    if (!isName(user)) {
                        document.getElementById("valid-fn").innerHTML = "FirstName does not conatin special characters";
                        $("#valid-fn").show();

                    }
                    else {

                        document.getElementById("Firstname").innerHTML = capitalizeFirstLetter(user);
                        }
                }
            });

            $("#Firstname").focusin(function () {
                $("#valid-fn").hide();
                document.getElementById("valid-fn").innerHTML = "";

            });



            $("#Lastname").focusout(function () {
                var user = $(this).val();

                //Checking the length of username
                if (user.length === 0) {
                    document.getElementById("valid-ln").innerHTML = "This field is required";
                    $("#valid-ln").show();
                    console.log("not getting values");
                }

                else {
                    if (!isName(user)) {
                        document.getElementById("valid-ln").innerHTML = "LastName does not conatin special characters";
                        $("#valid-ln").show();

                    }
                    else {
                        document.getElementById("Lastname").innerHTML = capitalizeFirstLetter(user);
                    }
                }

            });

            $("#Lastname").focusin(function () {
                $("#valid-ln").hide();
                document.getElementById("valid-ln").innerHTML = "";

            });

            $("#Bloodgroup").focusout(function () {
                debugger
                var user = $(this).val();

                //Checking the length of username
                if (user === "") {
                    document.getElementById("valid-blood").innerHTML = "Please Select Blood Group";
                    $("#valid-blood").show();
                }
            });

            $("#Bloodgroup").focusin(function () {
                $("#valid-blood").hide();
                document.getElementById("valid-blood").innerHTML = "";

            });

            


        });

    </script>

}
