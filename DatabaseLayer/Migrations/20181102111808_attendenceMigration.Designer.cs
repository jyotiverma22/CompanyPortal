// <auto-generated />
using System;
using DatabaseLayer.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DatabaseLayer.Migrations
{
    [DbContext(typeof(CompanyDbContext))]
    [Migration("20181102111808_attendenceMigration")]
    partial class attendenceMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Models.Attendence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttendenceStatus");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Emp_Id")
                        .IsRequired();

                    b.Property<DateTime>("LogInTime");

                    b.Property<DateTime>("LogOutTime");

                    b.Property<string>("TotalTime");

                    b.HasKey("Id");

                    b.ToTable("Emp_Attendence");
                });

            modelBuilder.Entity("Models.BloodGroup", b =>
                {
                    b.Property<int>("BId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BloodGroupName");

                    b.Property<bool>("IsActive");

                    b.HasKey("BId");

                    b.ToTable("BloodGroups");
                });

            modelBuilder.Entity("Models.DbLogging", b =>
                {
                    b.Property<int>("LoginId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExceptionMessage");

                    b.Property<string>("ExceptionSource");

                    b.Property<string>("ExceptionType");

                    b.Property<string>("ExceptionUrl");

                    b.Property<DateTime>("LogDate");

                    b.HasKey("LoginId");

                    b.ToTable("DbLoggings");
                });

            modelBuilder.Entity("Models.Department", b =>
                {
                    b.Property<int>("DId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Dname");

                    b.Property<bool>("IsActive");

                    b.HasKey("DId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Models.Emp_Reporting", b =>
                {
                    b.Property<int>("Emp_Rep_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Emp_ID");

                    b.Property<string>("Rep_Mgr");

                    b.HasKey("Emp_Rep_Id");

                    b.ToTable("Emp_Reportings");
                });

            modelBuilder.Entity("Models.Logs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Exception");

                    b.Property<string>("Level");

                    b.Property<string>("Logger");

                    b.Property<string>("Message");

                    b.Property<string>("Thread");

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("Models.Project", b =>
                {
                    b.Property<int>("PID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<string>("Mgr_Id")
                        .IsRequired();

                    b.Property<string>("ProjectName")
                        .IsRequired();

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<string>("UpdatedBy")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("PID");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Models.Project_TechnologyStack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Technology")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.Property<int>("projectId");

                    b.HasKey("Id");

                    b.HasIndex("projectId");

                    b.ToTable("Project_TechnologyStacks");
                });

            modelBuilder.Entity("Models.Registration", b =>
                {
                    b.Property<int>("Sno")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DId");

                    b.Property<string>("DOB");

                    b.Property<string>("Email");

                    b.Property<string>("Firstname");

                    b.Property<string>("Gender");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Lastname");

                    b.Property<string>("Password");

                    b.Property<string>("Phone");

                    b.Property<int>("RId");

                    b.Property<string>("R_M_Id");

                    b.Property<string>("UpdatedBy")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<string>("UserId");

                    b.Property<string>("Username");

                    b.HasKey("Sno");

                    b.HasIndex("BId");

                    b.HasIndex("DId");

                    b.HasIndex("RId");

                    b.ToTable("UserRegistration");
                });

            modelBuilder.Entity("Models.Role", b =>
                {
                    b.Property<int>("RID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<string>("RoleName");

                    b.HasKey("RID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Models.TechnologyStack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Technology");

                    b.HasKey("Id");

                    b.ToTable("TechnologyStacks");
                });

            modelBuilder.Entity("Models.User_TechnologyStack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<string>("UserId");

                    b.Property<int>("technologyStackId");

                    b.HasKey("Id");

                    b.HasIndex("technologyStackId");

                    b.ToTable("User_TechnologyStacks");
                });

            modelBuilder.Entity("Models.Project_TechnologyStack", b =>
                {
                    b.HasOne("Models.Project", "project")
                        .WithMany("project_TechnologyStacks")
                        .HasForeignKey("projectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Registration", b =>
                {
                    b.HasOne("Models.BloodGroup", "bloodGroup")
                        .WithMany("Users")
                        .HasForeignKey("BId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Department", "department")
                        .WithMany("Users")
                        .HasForeignKey("DId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Role", "role")
                        .WithMany("Users")
                        .HasForeignKey("RId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.User_TechnologyStack", b =>
                {
                    b.HasOne("Models.TechnologyStack", "technologyStack")
                        .WithMany("User_TechnologyStacks")
                        .HasForeignKey("technologyStackId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
